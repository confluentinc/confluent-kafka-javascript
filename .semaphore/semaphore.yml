# This file is managed by ServiceBot plugin - Semaphore. The content in this file is created using a common
# template and configurations in service.yml.
# Any modifications made to version, name, agent, and global_job_config will be overwritten by the generated
# content in nightly runs. Code changes made to the remaining sections will not be affected.
# For more information, please refer to the page:
# https://confluentinc.atlassian.net/wiki/spaces/Foundations/pages/2871296194/Add+SemaphoreCI
version: v1.0
name: build-test-release
agent:
  machine:
    type: s1-prod-ubuntu20-04-amd64-1

auto_cancel:
  running:
    when: "branch != 'master'"

execution_time_limit:
  hours: 1

queue:
  - when: "branch != 'master'"
    processing: parallel

global_job_config:
  prologue:
    commands:
      - checkout
      - sem-version node 18.19.0
      - node --version
      - npm --version
      - npx --version
      - git submodule update --init --recursive
      - cd deps/librdkafka
      - git fetch origin
      - git checkout dev_libdir_fix_for_zstd_zlib
      - cd ../../
      - export MKL_DEBUG=1



blocks:
  - name: "Linux arm64: Build and test"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      jobs:
        - name: "Build from source and test"
          commands:
            - npm install # this will actually not build anything if we have a release, but rather, fetch things using node-pre-gyp - so change this later.
            - make test

  - name: 'macOS arm64/m1: Build and test'
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-arm64
      jobs:
        - name: 'Build from source and test'
          commands:
            - npm install # this will actually not build anything if we have a release, but rather, fetch things using node-pre-gyp - so change this later.
            - make test

  - name: "Linux amd64: Build, test, lint"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-2
      prologue:
        commands:
          - npm install # this will actually not build anything if we have a release, but rather, fetch things using node-pre-gyp - so change this later.
      jobs:
        - name: "Test"
          commands:
            - make test
        - name: "ESLint"
          commands:
            - npx eslint lib/kafkajs


  # - name: "Linux amd64: Release"
  #   dependencies: [ ]
  #   run:
  #     when: "tag =~ '^v[0-9]\\.'"
  #   task:
  #     agent:
  #       machine:
  #         type: s1-prod-ubuntu20-04-amd64-2
  #     env_vars:
  #       - name: ARCHITECTURE
  #         value: "amd64"
  #       - name: PLATFORM
  #         value: "linux-glibc"
  #     prologue:
  #       commands:
  #         - sem-version node 18.19.0
  #         - node --version
  #         - npm --version
  #         - npx --version
  #         - sudo apt-get update -q
  #         - git submodule update --init --recursive
  #         - export LDFLAGS="-L$(pwd)/deps/librdkafka/mklove/deps/dest/$(pwd)/build/deps/"
  #         - echo $LDFLAGS
  #     jobs:
  #       - name: "Release"
  #         commands:
  #           - export ARTIFACT_KEY="node-librdkafka-${SEMAPHORE_GIT_TAG_NAME}-node-v108-${PLATFORM}-${ARCHITECTURE}.tar.gz"
  #           - npm install # node-pre-gyp will fallback to build here, because new tag implies no release yet.
  #           - npx node-pre-gyp package --target_platform="${PLATFORM}" --target_arch="${ARCHITECTURE}"
  #           - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
  #           - artifact push project "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  # - name: "Linux arm64: Release"
  #   dependencies: [ ]
  #   run:
  #     when: "tag =~ '^v[0-9]\\.'"
  #   task:
  #     agent:
  #       machine:
  #         type: s1-prod-ubuntu20-04-arm64-1
  #     env_vars:
  #       - name: ARCHITECTURE
  #         value: "arm64"
  #       - name: PLATFORM
  #         value: "linux-glibc"
  #     prologue:
  #       commands:
  #         - sem-version node 18.19.0
  #         - node --version
  #         - npm --version
  #         - npx --version
  #         - sudo apt-get update -q
  #         - git submodule update --init --recursive
  #         - export LDFLAGS="-L$(pwd)/deps/librdkafka/mklove/deps/dest/$(pwd)/build/deps/"
  #         - echo $LDFLAGS
  #     jobs:
  #       - name: "Release"
  #         commands:
  #           - export ARTIFACT_KEY="node-librdkafka-${SEMAPHORE_GIT_TAG_NAME}-node-v108-${PLATFORM}-${ARCHITECTURE}.tar.gz"
  #           - npm install # node-pre-gyp will fallback to build here, because new tag implies no release yet.
  #           - npx node-pre-gyp package --target_platform="${PLATFORM}" --target_arch="${ARCHITECTURE}"
  #           - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
  #           - artifact push project "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  # - name: "macOS arm64/m1: Release"
  #   dependencies: [ ]
  #   run:
  #     when: "tag =~ '^v[0-9]\\.'"
  #   task:
  #     agent:
  #       machine:
  #         type: s1-prod-macos-arm64
  #     env_vars:
  #       - name: ARCHITECTURE
  #         value: "arm64"
  #       - name: PLATFORM
  #         value: "darwin"
  #     prologue:
  #       commands:
  #         - sem-version node 18.19.0
  #         - node --version
  #         - npm --version
  #         - npx --version
  #         - git submodule update --init --recursive
  #         - export LDFLAGS="-L$(pwd)/deps/librdkafka/mklove/deps/dest/$(pwd)/build/deps/"
  #         - echo $LDFLAGS
  #     jobs:
  #       - name: "Release"
  #         commands:
  #           - export ARTIFACT_KEY="node-librdkafka-${SEMAPHORE_GIT_TAG_NAME}-node-v108-${PLATFORM}-${ARCHITECTURE}.tar.gz"
  #           - npm install # node-pre-gyp will fallback to build here, because new tag implies no release yet.
  #           - npx node-pre-gyp package --target_platform="${PLATFORM}" --target_arch="${ARCHITECTURE}"
  #           - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
  #           - artifact push project "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

