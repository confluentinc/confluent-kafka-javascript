# This file is managed by ServiceBot plugin - Semaphore. The content in this file is created using a common
# template and configurations in service.yml.
# Any modifications made to version, name, agent, and global_job_config will be overwritten by the generated
# content in nightly runs. Code changes made to the remaining sections will not be affected.
# For more information, please refer to the page:
# https://confluentinc.atlassian.net/wiki/spaces/Foundations/pages/2871296194/Add+SemaphoreCI
version: v1.0
name: build-test-release
agent:
  machine:
    type: s1-prod-ubuntu22-04-amd64-1

auto_cancel:
  running:
    when: "branch != 'master'"

execution_time_limit:
  hours: 3

queue:
  - when: "branch != 'master'"
    processing: parallel

global_job_config:
  prologue:
    commands:
      - checkout
      - git submodule update --init --recursive
      - cd deps/librdkafka
      - git fetch origin
      - git checkout v2.6.1
      - cd ../../
      - cache clear

blocks:
  - name: "Linux amd64 (musl): Build and test"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-amd64-2
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
      jobs:
        - name: "Build from source and test for musl"
          commands:
            - docker run -v "$(pwd):/v" node:18-alpine /v/.semaphore/build-docker.sh

  - name: "Linux arm64 (musl): Build and test"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-arm64-1
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
      jobs:
        - name: "Build from source and test for musl"
          commands:
              - docker run -v "$(pwd):/v" node:18-alpine /v/.semaphore/build-docker.sh

  - name: "Linux arm64: Build and test"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-arm64-1
      jobs:
        - name: "Build from source and test"
          commands:
            - export CKJS_LINKING=dynamic
            - npm run install-from-source
            - make test

  - name: 'macOS arm64/m1: Build and test'
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-arm64
      jobs:
        - name: 'Build from source and test'
          commands:
            - export CKJS_LINKING=dynamic
            - npm run install-from-source
            - make test

  - name: "Linux amd64: Build, test, lint, docs"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-amd64-2
      prologue:
        commands:
          - export CKJS_LINKING=dynamic
          - npm run install-from-source
      jobs:
        - name: "Test"
          commands:
            - make test
        - name: "Promisified Tests"
          commands:
            - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
            - docker compose up -d && sleep 30
            - export NODE_OPTIONS='--max-old-space-size=1536'
            - npx jest --no-colors --ci test/promisified/
        - name: "Lint"
          commands:
            - make lint
        - name: "Docs"
          commands:
            - make docs

  - name: "Linux amd64: Performance"
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-amd64-3
      env_vars:
        - name: TARGET_PRODUCE_PERFORMANCE
          value: "35"
        - name: TARGET_CONSUME_PERFORMANCE
          value: "18"
        - name: TARGET_CTP_PERFORMANCE
          value: "0.02"
      prologue:
        commands:
          - export DEBIAN_FRONTEND=noninteractive
          - export NEEDRESTART_MODE=a
          - wget -qO - https://packages.confluent.io/deb/7.7/archive.key | sudo apt-key add -
          - sudo -E add-apt-repository -y "deb https://packages.confluent.io/clients/deb $(lsb_release -cs) main"
          - sudo -E apt-get update
          - sudo -E apt-get install -y build-essential gcc g++ make python3
          - sudo -E apt-get install -y librdkafka-dev bc
          - export CKJS_LINKING=dynamic
          - export BUILD_LIBRDKAFKA=0
          - npm run install-from-source
      jobs:
        - name: "Performance Test"
          commands:
            - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
            - docker compose up -d && sleep 30
            - export NODE_OPTIONS='--max-old-space-size=1536'
            - cd examples/performance
            - npm install
            - bash -c '../../ci/tests/run_perf_test.sh'
            - rm -rf ./node_modules

  - name: "Linux amd64: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-amd64-2
      env_vars:
        - name: ARCHITECTURE
          value: "x64"
        - name: PLATFORM
          value: "linux"
        - name: LIBC
          value: "glibc"
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18,108
                - 20,115
                - 21,120
                - 22,127
                - 23,131
          commands:
            - export NODE_VERSION=$(echo $NODE_VERSION_ABI | cut -d, -f1)
            - export NODE_ABI=$(echo $NODE_VERSION_ABI | cut -d, -f2)
            - sem-version node $NODE_VERSION
            - export ARTIFACT_KEY="confluent-kafka-javascript-${SEMAPHORE_GIT_TAG_NAME}-node-v${NODE_ABI}-${PLATFORM}-${LIBC}-${ARCHITECTURE}.tar.gz"
            - npm ci # node-pre-gyp will fallback to build here, because new tag implies no release yet.
            - npx node-pre-gyp package
            - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
            - artifact push workflow "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  - name: "Linux arm64: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-arm64-1
      env_vars:
        - name: ARCHITECTURE
          value: "arm64"
        - name: PLATFORM
          value: "linux"
        - name: LIBC
          value: "glibc"
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18,108
                - 20,115
                - 21,120
                - 22,127
                - 23,131
          commands:
            - export NODE_VERSION=$(echo $NODE_VERSION_ABI | cut -d, -f1)
            - export NODE_ABI=$(echo $NODE_VERSION_ABI | cut -d, -f2)
            - sem-version node $NODE_VERSION
            - export ARTIFACT_KEY="confluent-kafka-javascript-${SEMAPHORE_GIT_TAG_NAME}-node-v${NODE_ABI}-${PLATFORM}-${LIBC}-${ARCHITECTURE}.tar.gz"
            - npm ci # node-pre-gyp will fallback to build here, because new tag implies no release yet.
            - npx node-pre-gyp package
            - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
            - artifact push workflow "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  - name: "Linux amd64 musl: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-amd64-1
      env_vars:
        - name: ARCHITECTURE
          value: "x64"
        - name: PLATFORM
          value: "linux"
        - name: LIBC
          value: "musl"
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18,108
                - 20,115
                - 21,120
                - 22,127
                - 23,131
          commands:
            - export NODE_VERSION=$(echo $NODE_VERSION_ABI | cut -d, -f1)
            - export NODE_ABI=$(echo $NODE_VERSION_ABI | cut -d, -f2)
            - export ARTIFACT_KEY="confluent-kafka-javascript-${SEMAPHORE_GIT_TAG_NAME}-node-v${NODE_ABI}-linux-${LIBC}-${ARCHITECTURE}.tar.gz"
            - docker run -v "$(pwd):/v" node:${NODE_VERSION}-alpine /v/.semaphore/build-docker.sh
            - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
            - artifact push workflow "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  - name: "Linux arm64 musl: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-arm64-1
      env_vars:
        - name: ARCHITECTURE
          value: "arm64"
        - name: PLATFORM
          value: "linux"
        - name: LIBC
          value: "musl"
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18,108
                - 20,115
                - 21,120
                - 22,127
                - 23,131
          commands:
            - export NODE_VERSION=$(echo $NODE_VERSION_ABI | cut -d, -f1)
            - export NODE_ABI=$(echo $NODE_VERSION_ABI | cut -d, -f2)
            - export ARTIFACT_KEY="confluent-kafka-javascript-${SEMAPHORE_GIT_TAG_NAME}-node-v${NODE_ABI}-linux-${LIBC}-${ARCHITECTURE}.tar.gz"
            - docker run -v "$(pwd):/v" node:${NODE_VERSION}-alpine /v/.semaphore/build-docker.sh
            - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
            - artifact push workflow "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  - name: "macOS arm64/m1: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-arm64
      env_vars:
        - name: ARCHITECTURE
          value: "arm64"
        - name: PLATFORM
          value: "darwin"
        - name: LIBC
          value: "unknown"
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18,108
                - 20,115
                - 21,120
                - 22,127
                - 23,131
          commands:
            - export NODE_VERSION=$(echo $NODE_VERSION_ABI | cut -d, -f1)
            - export NODE_ABI=$(echo $NODE_VERSION_ABI | cut -d, -f2)
            - sem-version node $NODE_VERSION
            - export ARTIFACT_KEY="confluent-kafka-javascript-${SEMAPHORE_GIT_TAG_NAME}-node-v${NODE_ABI}-${PLATFORM}-${LIBC}-${ARCHITECTURE}.tar.gz"
            - npm ci # node-pre-gyp will fallback to build here, because new tag implies no release yet.
            - npx node-pre-gyp package
            - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
            - artifact push workflow "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  - name: "macOS Intel: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-amd64
      env_vars:
        - name: ARCHITECTURE
          value: "x64"
        - name: PLATFORM
          value: "darwin"
        - name: LIBC
          value: "unknown"
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18,108
                - 20,115
                - 21,120
                - 22,127
                - 23,131
          commands:
            - export NODE_VERSION=$(echo $NODE_VERSION_ABI | cut -d, -f1)
            - export NODE_ABI=$(echo $NODE_VERSION_ABI | cut -d, -f2)
            - sem-version node $NODE_VERSION
            - export ARTIFACT_KEY="confluent-kafka-javascript-${SEMAPHORE_GIT_TAG_NAME}-node-v${NODE_ABI}-${PLATFORM}-${LIBC}-${ARCHITECTURE}.tar.gz"
            - npm ci # node-pre-gyp will fallback to build here, because new tag implies no release yet.
            - npx node-pre-gyp package
            - ls build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}
            - artifact push workflow "build/stage/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/${ARTIFACT_KEY}"

  - name: "Windows x64: Release"
    dependencies: [ ]
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-windows
      env_vars:
        # Disable vcpkg telemetry
        - name: VCPKG_DISABLE_METRICS
          value: 'yes'
        - name: ARCHITECTURE
          value: "x64"
        - name: PLATFORM
          value: "win32"
        - name: LIBC
          value: "unknown"
      prologue:
        commands:
          # The semaphore agent already comes with an installed version of node. We, however, need to use a different
          # version of node for the release (as many as we need to cover all the different ABIs).
          # The node installer does not allow us to downgrade, so we need to uninstall the current version.
          # The method below isn't particularly robust (as it depends on the particular format of the URL), but it
          # works and can be easily fixed if it breaks (the node --version in the below jobs can be checked if there are
          # any issues in the build).
          - $env:InstalledMajor = (Get-Command node).Version.Major
          - $env:InstalledMinor = (Get-Command node).Version.Minor
          - $env:InstalledBuild = (Get-Command node).Version.Build
          - $env:InstalledVersion = "v${env:InstalledMajor}.${env:InstalledMinor}.${env:InstalledBuild}"
          - echo "https://nodejs.org/dist/${env:InstalledVersion}/node-${env:InstalledVersion}-x64.msi"
          - Invoke-WebRequest "https://nodejs.org/dist/${env:InstalledVersion}/node-${env:InstalledVersion}-x64.msi" -OutFile node_old.msi
          - msiexec /qn /l* node-old-log.txt /uninstall node_old.msi
          - cat .\node-old-log.txt
      jobs:
        - name: "Release"
          matrix:
            - env_var: NODE_VERSION_ABI
              values:
                - 18.19.0,108
                - 20.11.0,115
                - 21.6.1,120
                - 22.2.0,127
                - 23.2.0,131
          commands:
            - $env:NODE_VERSION = $env:NODE_VERSION_ABI.Split(',')[0]
            - $env:NODE_ABI = $env:NODE_VERSION_ABI.Split(',')[1]
            - Invoke-WebRequest "https://nodejs.org/download/release/v${env:NODE_VERSION}/node-v${env:NODE_VERSION}-x64.msi" -OutFile node.msi
            - msiexec /qn /l* node-log.txt /i node.msi
            - cat .\node-log.txt
            - node --version
            - pip install setuptools
            - $env:ARTIFACT_KEY = "confluent-kafka-javascript-${env:SEMAPHORE_GIT_TAG_NAME}-node-v${env:NODE_ABI}-${env:PLATFORM}-${env:LIBC}-${env:ARCHITECTURE}.tar.gz"
            - echo "$env:ARTIFACT_KEY"
            - npm ci # node-pre-gyp will fallback to build here, because new tag implies no release yet.
            - npx node-pre-gyp package
            - ls "build/stage/${env:SEMAPHORE_GIT_TAG_NAME}/${env:ARTIFACT_KEY}"
            - artifact push workflow "build/stage/${env:SEMAPHORE_GIT_TAG_NAME}/${env:ARTIFACT_KEY}" --destination "releases/${env:SEMAPHORE_GIT_TAG_NAME}/${env:ARTIFACT_KEY}"

  - name: 'Packaging: tar all release artifacts'
    dependencies:
      - 'Linux amd64: Release'
      - 'Linux arm64: Release'
      - 'Linux amd64 musl: Release'
      - 'Linux arm64 musl: Release'
      - 'macOS arm64/m1: Release'
      - 'macOS Intel: Release'
      - 'Windows x64: Release'
    run:
      when: "tag =~ '^v[0-9]\\.'"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu22-04-amd64-2
      jobs:
        - name: "Tarball"
          commands:
            - artifact pull workflow releases
            - tar -czvf releases.${SEMAPHORE_GIT_TAG_NAME}.tar.gz releases
            - artifact push project "releases.${SEMAPHORE_GIT_TAG_NAME}.tar.gz" --destination "releases/${SEMAPHORE_GIT_TAG_NAME}/releases.${SEMAPHORE_GIT_TAG_NAME}.tar.gz"